#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct Event_Struct {
	char * Start_Time; //24 Hour Digital format, HH:MM:SS
	char * End_Time; //24 Hour Digital format, HH:MM:SS
	char * Duration; //24 Hour Digital format, HH:MM:SS
	char * Date; //Month and then Day format, MM/DD
}Event;

char * Validate_ASCII_Input(char Low, char High, char ** input_range) {

	while (((**input_range) < Low) || ((**input_range > High))) {
		printf("Please only enter a digit between %c and %c.\n>", Low, High);
		fgets(*input_range, 3, stdin); //one for input char, another for new line of enter, a final for terminating character.
	}

	return *input_range;

}

void Validate_Time_Format(char * user_input_buffer) {

	char * temp = malloc(sizeof(char) * 2);

	temp[0] = user_input_buffer[0];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '2', &temp); //H1

	temp[0] = user_input_buffer[1];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '4', &temp); //H2

	temp[0] = user_input_buffer[2];
	temp[1] = '\0';
	Validate_ASCII_Input(':', ':', &temp); //:

	temp[0] = user_input_buffer[3];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '5', &temp); //M1

	temp[0] = user_input_buffer[4];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '9', &temp); //M2

	temp[0] = user_input_buffer[5];
	temp[1] = '\0';
	Validate_ASCII_Input(':', ':', &temp); //:

	temp[0] = user_input_buffer[6];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '5', &temp); //S1

	temp[0] = user_input_buffer[7];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '9', &temp); //S2

	return;
}


void print_main_menu() {

	printf("\n---Main Menu---\n\n");
	printf("Welcome to the Event Application!\n");
	printf("(Events most only be an hour long.)\n\n");
	printf("1) Add an event.\n");
	printf("2) Delete an event.\n");
	printf("3) View event(s).\n");
	printf("4) Add an event.\n");
	printf("5) Exit.\n\n");

	return;

}

char * CreateEventMenu_GetInput(int option_to_exclude_from_menu, char ** user_input_buffer) {

	/* Determines what options the User see's on the screen, based on what options they've previously selected. Also indicates if the User wants to Amend one of the previous variables they entered. 
	Returns 0 for no amendment requested, 
	Returns 1 for amendment requested.*/
	
	int Finished = 0;

	while (Finished = 0) {

		printf("\n___Creating Event___\n");
		printf("Please Enter one of the following to begin Event Construction...\n");

		if (option_to_exclude_from_menu != 1) {
			printf("1) Event Start Time (HH:MM:SS)\n");
		}

		if (option_to_exclude_from_menu != 2) {
			printf("2) Event End Time (HH:MM:SS)\n");
		}

		if (option_to_exclude_from_menu != 3) {
			printf("3) Event Duration (HH:MM:SS)\n");
		}

		printf(">");
		fgets(*user_input_buffer, 3, stdin);

		switch (option_to_exclude_from_menu) {
		case(1):
			if ((**user_input_buffer != '2') || (**user_input_buffer != '3')) {
				printf("You've Already entered the Event Start Time. Would you like to Amend this value? (Y/N)\n>");
				fgets(*user_input_buffer, 3, stdin);
				while ((**user_input_buffer != 'Y') || (**user_input_buffer != 'N')) {
					printf("Please only enter Y, or N.");
				}
				if (**user_input_buffer == 'Y') {
					**user_input_buffer = '1';
					Finished = 1;
				}
				else {
					Finished = 0;
				}
			}
			else {
				Finished = 1;
			}
			break;
		case(2):
			if ((**user_input_buffer != '1') || (**user_input_buffer != '3')) {
				printf("You've Already entered the Event End Time. Would you like to Amend this value? (Y/N)\n>");
				fgets(*user_input_buffer, 3, stdin);
				while ((**user_input_buffer != 'Y') || (**user_input_buffer != 'N')) {
					printf("Please only enter Y, or N.");
				}
				if (**user_input_buffer == 'Y') {
					**user_input_buffer = '2';
					Finished = 1;
				}
				else {
					Finished = 0;
				}
			}
			else {
				Finished = 1;
			}
			break;
		case(3):
			if ((**user_input_buffer != '1') || (**user_input_buffer != '3')) {
				printf("You've Already entered the Event End Time. Would you like to Amend this value? (Y/N)\n>");
				fgets(*user_input_buffer, 3, stdin);
				while ((**user_input_buffer != 'Y') || (**user_input_buffer != 'N')) {
					printf("Please only enter Y, or N.");
				}
				if (**user_input_buffer == 'Y') {
					**user_input_buffer = '2';
					Finished = 1;
				}
				else {
					Finished = 0;
				}
			}
			else {
				Finished = 1;
			}
			break;
		default:
			printf("Unhandled state.");
			Finished = 2;
		}
	}

	if(Finished == 2){
		return NULL;
	}
	else {
		return *user_input_buffer;
	}

}

Event * Create_Event(FILE * EventDataBase) {

	/* Functioin Description:
	Prompts for 2 of the following values:
	1)Event Start Time, 
	2)Event Ending Time,
	3)Event Duration,
	Determines the 3rd variable, based of the previous 2 entered. 
	Then populates this information to a transaction structure and returns a single event pointer. */

	Event * New_Event = NULL;
	char * user_input_buffer = NULL;
	int var1 = 0;
	int var2 = 0;
	char * temp = NULL;
	int user_input = 0;
	int i = 0;

	user_input_buffer = malloc(3 * sizeof(char));

	if (user_input_buffer != NULL) {

		while (var1 == 0 || var2 == 0) {

			user_input_buffer = CreateEventMenu_GetInput(var1, &user_input_buffer);

			if (user_input_buffer != NULL) {
				user_input = atoi(user_input_buffer);
				if (var1 == 0) {
					var1 = user_input;
				}
				else {
					var2 = user_input;
				}

				switch (user_input) {
				case(1): // entering event start time
					printf("Please enter Event Start Time.\n(HH:MM:SS)\n");
					realloc(user_input_buffer, (10 * sizeof(char)));

					if (user_input_buffer != NULL) {
						fgets(user_input_buffer, 10, stdin);
						Validate_Time_Format(user_input_buffer);
						printf("Event Start time of %s entered.\n", user_input_buffer);
						New_Event->Start_Time = user_input_buffer;
					}

					else {
						printf("Unable to allocate memory to Temp Buffer during Create Event Time Validation.");
						return NULL;
					}
					break;

				case(2):
					printf("Please enter Event End Time.\n(HH:MM:SS)\n");
					realloc(user_input_buffer, (10 * sizeof(char)));

					if (user_input_buffer != NULL) {
						fgets(user_input_buffer, 10, stdin);
						Validate_Time_Format(user_input_buffer);
						printf("Event Start time of %s entered.\n", user_input_buffer);
						New_Event->End_Time = user_input_buffer;
					}

					else {
						printf("Unable to allocate memory to Temp Buffer during Create Event Time Validation.");
						return NULL;
					}
					break;

				case(3):
					printf("Please enter Event Duration Time.\n(HH:MM:SS)\n");
					realloc(user_input_buffer, (10 * sizeof(char)));

					if (user_input_buffer != NULL) {
						fgets(user_input_buffer, 10, stdin);
						Validate_Time_Format(user_input_buffer);
						printf("Event Start time of %s entered.\n", user_input_buffer);
						New_Event->Duration = user_input_buffer;
					}

					else {
						printf("Unable to allocate memory to Temp Buffer during Create Event Time Validation.");
						return NULL;
					}
					break;

				default:
					printf("Unhandled Case");
				}
			}
			else {
				printf("Input Error in CreateEventMenu_GetInput\n");
				printf("CreateEvent Not Initialised.\n");
				return NULL;
			}
		}

		//We now have 2 variables, we can determine the 3rd.
		if(var1 + var2 == 3){
			//then Option 3 has not been entered (Duration)
			for(i = 0; New_Event->End_Time[i])
	
		

	else {
		printf("Failed initial application of Creat_Event Memory Block...\n");
		return NULL;
	}

}

int main_menu(FILE * EventDataBase) {

	int main_menu_status = 0;
	char * user_input = NULL;

	Event * New_Event = NULL;

	user_input = malloc(3 * sizeof(char)); //one for new line character, plus one for terminating null value.

	print_main_menu();

	//check to see if user input is between 1 and 5.
	while (main_menu_status == 0) {
		printf("Please select an option.\n");
		printf(">");

		fgets(user_input, 3, stdin);
		Validate_ASCII_Input('1', '5', &user_input);
		main_menu_status = atoi(user_input);

		switch (main_menu_status) {
				case (1): //Adding an Event
					New_Event = Create_Event(EventDataBase);
		}
			
	}

	/*switch (main_menu_status) {

	case(1): //Adding an Event.

	}*/

	printf("main_menu_status %s retrieved.\n", user_input);
	printf("main_menu_status %d retrieved.\n", main_menu_status);

	free(user_input);
	user_input = NULL;

	return main_menu_status;
}

int main() {
	FILE * EventDataBase = NULL; // Windows -> C:\Users\Yourname\source\repos\Solution1\ConsoleApplication1
	int menu = 1; // 1  = Processing not finished. 
	int file_holder = 0;

	//Does the file exist?
	if ((EventDataBase = fopen("CalendarDatabase.txt", "r+")) == NULL) {
		printf("No Existing Events Database found, initialising an new one...\n");
	}
	
	//Opening File for appending.
	EventDataBase = fopen("CalendarDatabase.txt", "a+");

	if (EventDataBase == NULL) {
		printf("Failed to open Event Database.\n");
		printf("Exiting...");
	}

	while (menu != 5) {

		menu = main_menu(EventDataBase);

	}

	/*if (save_file == 1) {
		save_file()
	}*/
		
	return 0;

}
