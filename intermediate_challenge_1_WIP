#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct Event_Struct {
	char * Start_Time; //24 Hour Digital format, HH:MM:SS
	char * End_Time; //24 Hour Digital format, HH:MM:SS
	char * Duration; //24 Hour Digital format, HH:MM:SS
	char * Start_Date; //Month and then Day format, MM/DD
	char * End_Date; //Month and then Day format, MM/DD
}Event;

char * Validate_ASCII_Input(char Low, char High, char ** input_range) {

	while (((**input_range) < Low) || ((**input_range > High))) {
		printf("Please only enter a digit between %c and %c.\n> ", Low, High);
		fgets(*input_range, 4, stdin); //one for input char, another for new line of enter, a final for terminating character.
	}

	return *input_range;

}

void Validate_Time_Format(char * user_input_buffer) {

	char * temp = malloc(sizeof(char) * 2);

	temp[0] = user_input_buffer[0];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '2', &temp); //H1

	temp[0] = user_input_buffer[1];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '4', &temp); //H2

	temp[0] = user_input_buffer[2];
	temp[1] = '\0';
	Validate_ASCII_Input(':', ':', &temp); //:

	temp[0] = user_input_buffer[3];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '5', &temp); //M1

	temp[0] = user_input_buffer[4];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '9', &temp); //M2

	temp[0] = user_input_buffer[5];
	temp[1] = '\0';
	Validate_ASCII_Input(':', ':', &temp); //:

	temp[0] = user_input_buffer[6];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '5', &temp); //S1

	temp[0] = user_input_buffer[7];
	temp[1] = '\0';
	Validate_ASCII_Input('0', '9', &temp); //S2

	return;
}


void print_main_menu() {

	printf("\n---Main Menu---\n\n");
	printf("Welcome to the Event Application!\n");
	printf("(Events most only be an hour long.)\n\n");
	printf("1) Add an event.\n");
	printf("2) Delete an event.\n");
	printf("3) Sort event(s).\n");
	printf("4) Add an event.\n");
	printf("5) View event(s).\n");
	printf("6) Exit.\n\n");

	return;

}

char * CreateEventMenu_GetInput(int option_to_exclude_from_menu, char ** user_input_buffer) {

	/* Determines what options the User see's on the screen, based on what options they've previously selected. Also indicates if the User wants to Amend one of the previous variables they entered.
	Returns 0 for no amendment requested,
	Returns 1 for amendment requested.*/

	int Finished = 0;
	int var1, var2;

	var1 = var2 = 0;

	printf("*Event Time*\n");

	while (Finished == 0) {

		printf("Please Select one of the following to Enter:\n\n");

		if (option_to_exclude_from_menu != 1) {
			printf("1) Event Start Time (HH:MM:SS)\n");
		}

		if (option_to_exclude_from_menu != 2) {
			printf("2) Event End Time (HH:MM:SS)\n");
		}

		if (option_to_exclude_from_menu != 3) {
			printf("3) Event Duration (HH:MM:SS)\n");
		}

		printf(">");
		fgets(*user_input_buffer, 3, stdin);

		/*if ( ((atoi(*user_input_buffer) == option_to_exclude_from_menu)) && ((*user_input_buffer) != '0') ) {

		printf("You've already entered ");

		switch (option_to_exclude_from_menu) {
		case(1):
			printf("Event Start Time, ");
			break;
		case(2):
			printf("Event End Time, ");
			break;
		case(3):
			printf("Event Duration, ");
			break;
		default:
			printf("Something I didn't think about.\n");
			break;
		}

		printf("\nWould you like to re-enter this value? (Y/N)\n>");
		realloc(user_input_buffer, (3 * sizeof(char)));
		fgets(user_input_buffer, 3);
		if( (*user_input == 'Y') || (*user_input == 'N') ){
			if (*user_input == 'Y') {
				*user_input = itoa(option_to_exclude_from_menu, *user_input, 10);
			}
			else {

			}
		}*/

		//Need to to add in validation to exclude a value of 2 for entry of the second variable.
		switch (option_to_exclude_from_menu) {
		case(0):
			Validate_ASCII_Input('1', '3', *user_input_buffer);
		case(1):
			Validate_ASCII_Input('2', '3', *user_input_buffer);
			break;
		case(2):
			Validate_ASCII_Input('1', '1', *user_input_buffer);
			Validate_ASCII_Input('3', '3', *user_input_buffer);
			break;
		case(3):
			Validate_ASCII_Input('1', '2', *user_input_buffer);
			break;
		}

		realloc(user_input_buffer, (10 * sizeof(char));
		option_to_exclude_from_menu = atoi(user_input_buffer);

		switch (option_to_exclude_from_menu) {

		case(1): // User wants to initialise Start Time
			printf("Please Enter Event Start Time (HH:MM:SS)\n>");
			fgets(*user_input_buffer, 10);
			Validate_Time_Format(*user_input_buffer);
			Event->Start_Time = user_input_buffer;
			break;

		case(2): //User wants to initalise End Time
			printf("Please Enter Event End Time (HH:MM:SS)\n>");
			fgets(*user_input_buffer, 10);
			Validate_Time_Format(*user_input_buffer);
			Event->End_Time = user_input_buffer;
			break;

		case(3): //User wants to enter duration
			printf("Please Enter Event Duration (HH:MM:SS)\n>");
			fgets(*user_input_buffer, 10);
			Validate_Time_Format(*user_input_buffer);
			Event->Duration = user_input_buffer;
			break;

		default:
			printf("Fucked up\n");
			break;
		}


		if (var1 == 0) {
			var1 = option_to_exclude_from_menu;
		}
		else {
			var2 = option_to_exclude_from_menu;
			Finished = 1;
		}
	}

	//We now have Variable 1 and 2, we need to determine the 3rd.
	//var1 + var2 = 3, then we have Start Date(1) and End Date(2)
	//var1 + var2 = 4, then we have Start Date(1) and Duration(3)
	//var1 + var2 = 5, then we have End Date(2) and Duration(3)

	if ((var1 + var2) == 3) {
		printf("*Determining Event Duration*")
		if (strcmp(Event->Start_Date, Event->End_Date) == 0) {
			printf("Single Day Event Detected.\n");
			//Dates are Equal, Same Day Event. No modifications need to be done for time.
			for (i = 0; Event->Duration[i] != '\0'; i++) {
				if ((Event->End_Time[i] - Event->Start_Time[i]) >= 0) {
					Event->Duration[i] = (Event->End_Time[i] - Event->Start_Time[i]);
				}
				else {
					printf("Error, Your event Ends before it starts!\n\n");
					Event->Duration[i] = '-';
				}
			}
		}
		else {
			//MultiDayEvent
		}
	}


}


char * GetDate(char ** user_input_buffer) {

	int Finished_Date_Processing = 0;
	char * month_str = malloc(sizeof(char) * 3);
	char * day_str = malloc(sizeof(char) * 3);
	int day = 0;
	int month = 0;
	int month_to_daycount[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

	while (Finished_Date_Processing != 1) {
		if (user_input_buffer != NULL) {

			printf("Please enter date. (DD/MM)\n> ");
			fgets(*user_input_buffer, 7, stdin);

			if (month_str != NULL) {
				month_str[0] = (*user_input_buffer)[3];
				month_str[1] = (*user_input_buffer)[4];
				month_str[2] = '\0';

				month = atoi(month_str);
				if (month > 12 || month < 1) {
					printf("Please Enter a valid Month (between 01 and 12.)\n");
					Finished_Date_Processing = 0;
				}
			}

			if (day_str != NULL) {
				day_str[0] = (*user_input_buffer)[0];
				day_str[1] = (*user_input_buffer)[1];
				day_str[2] = '\0';

				day = atoi(day_str);
				if ((day > 0) && (day <= month_to_daycount[month])) {
					Finished_Date_Processing = 1;
				}
				else {
					printf("Invalid Date Entered, (between 1 and %d required for month %d.)\n", month_to_daycount[month], month);
					Finished_Date_Processing = 0;
				}
			}
		}
	}

	return *user_input_buffer;

}


Event * Create_Event(FILE * EventDataBase) {

	/* Functioin Description:
	Prompts for 2 of the following values:
	1)Event Start Time, 
	2)Event Ending Time,
	3)Event Duration,
	Determines the 3rd variable, based of the previous 2 entered. 
	Then populates this information to a transaction structure and returns a single event pointer. */

	Event * New_Event = NULL;
	char * user_input_buffer = NULL;
	int var1 = 0;
	int var2 = 0;
	char * temp = NULL;
	int user_input = 0;

	user_input_buffer = malloc(8 * sizeof(char));

	New_Event = malloc(1 * sizeof(Event));
	New_Event->Start_Time = malloc(sizeof(char) * 9); //24 Hour Digital format, HH:MM:SS
	New_Event->End_Time = malloc(sizeof(char) * 9);  //24 Hour Digital format, HH:MM:SS
	New_Event->Duration = malloc(sizeof(char) * 9); //24 Hour Digital format, HH:MM:SS
	New_Event->Start_Date = malloc(sizeof(char) * 6); //Month and then Day format, MM/DD
	New_Event->End_Date = malloc(sizeof(char) * 6);


	//Getting Event Start and End Date.
	if ((user_input_buffer) != NULL) {

		printf("\n*-----Creating Event-----*\n");
		printf("*Event Start Date*\n");
		strcpy(New_Event->Start_Date, GetDate(&user_input_buffer));

		printf("Does the Event last longer than a day? (Y\N)\n> ");

		if (user_input_buffer != NULL) {
			fgets(user_input_buffer, 4, stdin);

			while ((*user_input_buffer != 'Y') && (*user_input_buffer != 'N')) {
				printf("Please only enter Y or N.\n> ");
				fgets(user_input_buffer, 3, stdin);
			}

			if ((*user_input_buffer == 'Y')) {
				realloc(user_input_buffer, (6 * sizeof(char)));
				printf("*Event End Date*\n");
				strcpy(New_Event->End_Date, GetDate(&user_input_buffer));
			}
			else {
				strcpy(New_Event->End_Date,New_Event->Start_Date);
			}
		}

		else {
			printf("Failed reallocation of Multiday Question Buffer.\n");
		}

	}


	if (user_input_buffer != NULL) {

		while (var1 == 0 || var2 == 0) {

			user_input_buffer = CreateEventMenu_GetInput(var1, &user_input_buffer);

			if (user_input_buffer != NULL) {
				user_input = atoi(user_input_buffer);
				if (var1 == 0) {
					var1 = user_input;
				}
				else {
					var2 = user_input;
				}

				switch (user_input) {
				case(1): // entering event start time
					printf("Please enter Event Start Time.\n(HH:MM:SS)\n");
					realloc(user_input_buffer, (10 * sizeof(char)));

					if (user_input_buffer != NULL) {
						fgets(user_input_buffer, 10, stdin);
						Validate_Time_Format(user_input_buffer);
						printf("Event Start time of %s entered.\n", user_input_buffer);
						New_Event->Start_Time = user_input_buffer;
					}

					else {
						printf("Unable to allocate memory to Temp Buffer during Create Event Time Validation.");
						return NULL;
					}
					break;

				case(2):
					printf("Please enter Event End Time.\n(HH:MM:SS)\n");
					realloc(user_input_buffer, (10 * sizeof(char)));

					if (user_input_buffer != NULL) {
						fgets(user_input_buffer, 10, stdin);
						Validate_Time_Format(user_input_buffer);
						printf("Event Start time of %s entered.\n", user_input_buffer);
						New_Event->End_Time = user_input_buffer;
					}

					else {
						printf("Unable to allocate memory to Temp Buffer during Create Event Time Validation.");
						return NULL;
					}
					break;

				case(3):
					printf("Please enter Event Duration Time.\n(HH:MM:SS)\n");
					realloc(user_input_buffer, (10 * sizeof(char)));

					if (user_input_buffer != NULL) {
						fgets(user_input_buffer, 10, stdin);
						Validate_Time_Format(user_input_buffer);
						printf("Event Start time of %s entered.\n", user_input_buffer);
						New_Event->Duration = user_input_buffer;
					}

					else {
						printf("Unable to allocate memory to Temp Buffer during Create Event Time Validation.");
						return NULL;
					}
					break;

				default:
					printf("Unhandled Case");
				}
			}
			else {
				printf("Input Error in CreateEventMenu_GetInput\n");
				printf("CreateEvent Not Initialised.\n");
				return NULL;
			}
		}
	}

	else {
		printf("User_input_buffer allocation failed.\n");
	}

}

int main_menu(FILE * EventDataBase) {

	int main_menu_status = 0;
	char * user_input = NULL;

	Event * New_Event = NULL;

	user_input = malloc(4 * sizeof(char)); //one for new line character, plus one for terminating null value.

	print_main_menu();

	//check to see if user input is between 1 and 5.
	while (main_menu_status == 0) {
		printf("Please select an option.\n");
		printf("> ");
		fgets(user_input, 4, stdin);
		Validate_ASCII_Input('1', '5', &user_input);
		main_menu_status = atoi(user_input);

		switch (main_menu_status) {
				case (1): //Adding an Event
					New_Event = Create_Event(EventDataBase);
		}
			
	}

	/*switch (main_menu_status) {

	case(1): //Adding an Event.

	}*/

	printf("main_menu_status %s retrieved.\n", user_input);
	printf("main_menu_status %d retrieved.\n", main_menu_status);

	free(user_input);
	user_input = NULL;

	return main_menu_status;
}

int main() {
	FILE * EventDataBase = NULL; // Windows -> C:\Users\Yourname\source\repos\Solution1\ConsoleApplication1
	int menu = 1; // 1  = Processing not finished. 
	int file_holder = 0;

	//Does the file exist?
	if ((EventDataBase = fopen("CalendarDatabase.txt", "r+")) == NULL) {
		printf("No Existing Events Database found, initialising an new one...\n");
	}
	
	//Opening File for appending.
	EventDataBase = fopen("CalendarDatabase.txt", "a+");

	if (EventDataBase == NULL) {
		printf("Failed to open Event Database.\n");
		printf("Exiting...");
	}

	while (menu != 5) {

		menu = main_menu(EventDataBase);

	}

	/*if (save_file == 1) {
		save_file()
	}*/
		
	return 0;

}
