#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct Event_Struct {
	char * Start_Time; //24 Hour Digital format, HH:MM:SS
	char * End_Time; //24 Hour Digital format, HH:MM:SS
	int * Duration; // Minutes
	char * Date; //Month and then Day format, MM/DD
}Event;

char * Validate_ASCII_Input(char Low, char High, char ** input_range) {

	while (((**input_range) < Low) || ((**input_range > High))) {
		printf("Please only enter a digit from the options above.\n>");
		fgets(*input_range, 3, stdin); //one for input char, another for new line of enter, a final for terminating character.
	}

	return *input_range;

}


void print_main_menu() {

	printf("\n---Main Menu---\n\n");
	printf("Welcome to the Event Application!\n");
	printf("(Events most only be an hour long.)\n\n");
	printf("1) Add an event.\n");
	printf("2) Delete an event.\n");
	printf("3) View event(s).\n");
	printf("4) Add an event.\n");
	printf("5) Exit.\n\n");

	return;

}

Event * Create_Event(FILE * EventDataBase) {

	/* Functioin Description:
	Determines 2 values for Event Start Time, Event Ending Time or Event Duration and determines the 3rd.
	Then populates this information to a transaction structure and returns the pointer. */

	char * user_input_buffer = NULL;
	char * var1 = NULL;
	char * var2 = NULL;
	int user_input = 0;
	int i = 0;

	user_input_buffer = malloc(3 * sizeof(char));

	if (user_input_buffer != NULL) {

		printf("Creating a New Event...\n");
		printf("Please select one of the following\n");
		printf("1) Event Start Time.\n");
		printf("2) Event End Time.\n");
		printf("3) Event Duration Time.\n");

		fgets(user_input_buffer, 3, stdin);
		Validate_ASCII_Input('1', '3', &user_input_buffer);

		user_input = atoi(user_input_buffer);
		switch (user_input) {
		case(1): // entering event start time
			printf("Please enter Event Start Time.\n(HH:MM:SS)\n");
			realloc(user_input_buffer, (10 * sizeof(char)));
			if (user_input_buffer != NULL) {
				fgets(user_input_buffer, 10, stdin);
				user_input_buffer = Validate_ASCII_Input('0', '2', user_input_buffer);
			}
			else {
				printf("Failed to reallocate Event Start Time Buffer...\n");
				return NULL;
			}
		}

	}

	else {
		printf("Failed initial application of Creat_Event Memory Block...\n");
		return NULL;
	}

}

int main_menu(FILE * EventDataBase) {

	int main_menu_status = 0;
	char * user_input = NULL;

	Event * New_Event = NULL;

	user_input = malloc(3 * sizeof(char)); //one for new line character, plus one for terminating null value.

	print_main_menu();

	//check to see if user input is between 1 and 5.
	while (main_menu_status == 0) {
		printf("Please select an option.\n");
		printf(">");

		fgets(user_input, 3, stdin);
		Validate_ASCII_Input('1', '5', &user_input);
		main_menu_status = atoi(user_input);

		switch (main_menu_status) {
				case (1): //Adding an Event
					New_Event = Create_Event(EventDataBase);
		}
			
	}

	/*switch (main_menu_status) {

	case(1): //Adding an Event.

	}*/

	printf("main_menu_status %s retrieved.\n", user_input);
	printf("main_menu_status %d retrieved.\n", main_menu_status);

	free(user_input);
	user_input = NULL;

	return main_menu_status;
}

int main() {
	FILE * EventDataBase = NULL; // Windows -> C:\Users\Yourname\source\repos\Solution1\ConsoleApplication1
	int menu = 1; // 1  = Processing not finished. 
	int file_holder = 0;

	//Does the file exist?
	if ((EventDataBase = fopen("CalendarDatabase.txt", "r+")) == NULL) {
		printf("No Existing Events Database found, initialising an new one...\n");
	}
	
	//Opening File for appending.
	EventDataBase = fopen("CalendarDatabase.txt", "a+");

	if (EventDataBase == NULL) {
		printf("Failed to open Event Database.\n");
		printf("Exiting...");
	}

	while (menu != 5) {

		menu = main_menu(EventDataBase);

	}

	/*if (save_file == 1) {
		save_file()
	}*/
		
	return 0;

}
