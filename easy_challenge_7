#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LEN 200
#define MAX_MORSE_STR_LEN 5

typedef struct Morse {
	char morse[6];
	char letter;
}Morse;

const Morse Translate_Array[] = {
	{".-", 'A'},
	{"-...", 'B'},
	{"-.-.", 'C'},
	{"-..", 'D'},
	{".", 'E'},
	{"..-.", 'F'},
	{"--.", 'G'},
	{"....", 'H'},
	{"..", 'I'},
	{".---", 'J'},
	{"-.-", 'K'},
	{".-..", 'L'},
	{"--", 'M'},
	{"-.", 'N'},
	{"---", 'O'},
	{".--.", 'P'},
	{"--.-", 'Q'},
	{".-.", 'R'},
	{"...", 'S'},
	{"-", 'T'},
	{"..-", 'U'},
	{"...-", 'V'},
	{".--", 'W'},
	{"-..-", 'X'},
	{"-.--", 'Y'},
	{"--.-", 'Z'},
	{"/", ' '},
};

char * encode_string(const char * input_string, char **output) {

	int i, y;
	char * output_string = *output;

	i = y = 0;

	output_string[0] = '\0';

	for (i = 0; input_string[i] != '\0'; i++) {
		for (y = 0; ((Translate_Array[y].letter != input_string[i]) && (y <= 26)); y++) {
		}
		strcat(output_string,Translate_Array[y].morse);
		strcat(output_string, " ");
	}

	return output_string;

}

void * decode_string(const char * input_string, char ** output) {

	int i, y;
	char * morse_input_chunks = malloc((sizeof(char)) * MAX_LEN);
	char * morse_input_local = malloc(strlen(input_string) + 1);
	char * output_string = *output;

	strcpy(morse_input_local, input_string);
	morse_input_chunks = strtok(morse_input_local, " ");

	i = y = 0;

	for (i = 0; morse_input_chunks != NULL; i++) {

		for (y = 0; ( (strcmp(Translate_Array[y].morse, morse_input_chunks) != 0) && y <= 26); y++) {
			//goes through the Morse list until it finds a matching morse string.
		}
		
		output_string[i] = Translate_Array[y].letter;
		morse_input_chunks = strtok(NULL, " ");
	}

	output_string[i] = '\0';

	free(morse_input_chunks);
	morse_input_chunks = NULL;

	free(morse_input_local);
	morse_input_chunks = NULL;

	return output_string;

}

int main(int argc, char *argv[]) {

	char * output_string = malloc(sizeof(char) * MAX_LEN);
	int i = 0;

	for (i = 0; i < argc; i++) {
		printf("Arg %d:\t%s\n", i, argv[i]);
	}

	if (argc != 3) {
		printf("*Morse Decoder/Endcoder*\n\tUsage \"Morse String Here \" -e (encode) -d (decode), max str length = %d chars. \n\n", MAX_LEN);
		free(argv);
		return 0;
	}

	else {

		if (strlen(argv[1]) < MAX_LEN) {
			if ((strcmp(argv[2], "-d") != 0)) {
				//default to encoding.
				output_string = encode_string(argv[1], &output_string);
				printf("Encoded Output:\t%s\n\n", output_string);
			}

			else {
				output_string = decode_string(argv[1], &output_string);
				printf("Decoded Output:\t%s\n\n", output_string);
			}
		}

		else {
			printf("Max str len exceeded. Please only enter %d characters in input string.", MAX_LEN);
		}
	}

	output_string = NULL;
	free(output_string);

	return 0;


}
